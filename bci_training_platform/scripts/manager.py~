#!/usr/bin/env python
from threading import Thread
from scipy import signal as sig
import sys, os, rospy, rospkg
import numpy as np
from std_msgs.msg import Float64MultiArray, Float64, MultiArrayDimension, String
from itertools import combinations

class manager:
	def __init__(self):
		rospy.init_node('manager', anonymous=True)
		rospy.Subscriber('manager_gui', String, self.callback_manager_gui, queue_size=10)
		self.pub=rospy.Publisher('manager_gui', String, queue_size=100)
		rospy.Subscriber('manager_smp', Float64MultiArray, self.callback_manager_smp)
		self.globalpath=os.path.abspath(os.path.dirname(__file__))
		
		self.loop=1
		self.user=""
		self.task=0
		self.parameters_1()
		
		
		while self.loop==1:
			pass
			
	def parameters_1(self):
		self.alert_time = 0
		self.cue_time = 0
		self.task_time = 0
		self.pause_time = 0
		self.classes=[]
		self.number_trials=0
		self.feature_window_0=0
		self.feature_window_1=0
		self.number_samples=0
		self.count=0
	
	def callback_manager_gui(self,msg):
		if msg.data[0:2]=="US":
			self.user=msg.data[2:]

		elif msg.data[0:2]=="NC":
			self.task=1
			self.file0=open(self.globalpath + "/users/%s/samples.txt" %self.user,'a')
			self.load_parameters_1()
			self.number_samples=((int(self.alert_time)+int(cue_time)+int(self.task_time)+int(self.pause_time))*int(self.number_trials)*len(self.classes)*250)/1000

		elif msg.data[0:2]=="XX" and self.user!="":
			self.status=1
			
		elif msg.data[0:2]=="XY" and self.user!="":
			self.status=0
			self.task=0
	
	
	
	def callback_manager_smp(self,msg):
		if self.task==1 and self.status==1:
			self.count+=1
			self.file0.write("".join([str(y)+'\t' for y in np.matrix(msg.data).T.A1])[0:-1]+'\n')		
			if self.count == self.num_samples:
				self.status=0
				self.count=0
				self.file0.close()
		
		
	def load_parameters_1(self):
		try:
			file=open(self.globalpath + "/users/" + self.user + "/" + "parameters_1.txt",'r')
		except:
			file=open(self.globalpath + "/users/" + self.user + "/" + "parameters_1.txt",'w')
			self.save_parameters_1()
		file=open(self.globalpath + "/users/" + self.user + "/" + "parameters_1.txt",'r')	
		self.alert_time = file.readline()[0:-1]
		self.cue_time = file.readline()[0:-1]
		self.task_time = file.readline()[0:-1]
		self.pause_time = file.readline()[0:-1]
		self.classes=[int(x) for x in file.readline()[0:-1].split(" ")]
		self.number_trials=file.readline()[0:-1]
		self.feature_window_0=file.readline()[0:-1]
		self.feature_window_1=file.readline()[0:-1]
		file.close()
		
a=manager()